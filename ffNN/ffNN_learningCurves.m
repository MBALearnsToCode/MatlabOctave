function f = ffNN_learningCurves(ffNN, ...
   trainInputBatches_3dArr, ...
   trainTargetOutputBatches_3dArr, ...
   validInput_rowMat, validOutput_rowMat, ...
   maxNumIters, regulParam = 0, ...
   funcOptimMethod = @fmincg, initSigma = 1e-2, ...
   randInit = true)

   numTrainBatches = size(trainInputBatches_3dArr, 3);

   cumTrainInput = [];

   cumTrainTargetOutput = [];

   for (b = 1 : numTrainBatches)

      cumTrainInput = [cumTrainInput; ...
         trainInputBatches_3dArr(:, :, b)];

      cumTrainTargetOutput = [cumTrainTargetOutput; ...
         trainTargetOutputBatches_3dArr(:, :, b)];

      ffNN_trained = ffNN_train...
         (cumTrainInput, ffNN, cumTrainTargetOutput, ...
         maxNumIters, regulParam, {}, false, ...
         funcOptimMethod, initSigma, randInit);

      f.trainCostAvg_noRegul(b) = ...
         ffNN_trained.costAvg_noRegul;

      f.validCostAvg_noRegul(b) = ffNN_fProp_bProp...
         (validInput_rowMat, ffNN_trained, ...
         validOutput_rowMat, 0, false).costAvg_noRegul;

   endfor

end