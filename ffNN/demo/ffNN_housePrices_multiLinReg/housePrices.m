function housePrices...
   (weightRegulParam = 0.003, ...
   learningRate = 0.3, numIters = 12)
   
   % load House Prices data
   data = load('housePrices.txt');   
   x1 = houseAreas_sqft = data(:, 1);
   x2 = data(:, 2);
   y = housePrices_000 = data(:, 3);
   X = [x1 (x1 .^ 2) (x1 .^ 3) (x1 .^ 4) (x1 .^ 5)]; % 
   
   % We normalize X for numerical stability purposes
   [X_norm mu sigma] = ...
      normalizeSubtractDivide(X);
  
   weights_analytic_normalized = linRegWeights_analytic...
      (y, X_norm, weightRegulParam);
   %w = fliplr(polyfit(x1, y, 2))';
   % Create simple neural net with linear function and 
   % 1 top-layer node
   ffNN = class_ffNN...
     (inputDimSizes_perCase___ = 5, ...
     addlLayersNumsNodes___ = [1], ...
     transformFuncs___ = {'linear'}, ...
     displayOverview___ = false, ...
     initWeights___ = false);
   % Set normalizing parameters
   % ffNN.normalizeSubtract = mu;
   % ffNN.normalizeDivide = sigma;

      % Train neural network with Training data set
      %ffNN = train_rmsProp...
      %   (ffNN_init___ = ffNN, ...
      %%   dataArgs___ = {X_norm y 1.0}, ...
      %   targetOutputs_areClassIndcsColVecs___ = false, ...         
      %   trainNumEpochs___ = 600, ...
      %   trainBatchSize___ = false, ...   
      %   trainRandShuff___ = false, ...
      %   trainCostApproxChunk_numBatches___ = 1, ...
      %   validCostCalcInterval_numChunks___ = 1, ...
      %   learningRate___ = 3000, ...
      %   decayRate = 0.9, ...
      %   momentumRate___ = 0.9, ...
      %   nesterovAccGrad___ = true, ...
      %   weightRegulArgs___ = {{'L2'} [weightRegulParam]}, ...
      %   connectProbs___ = [1.0], ...
      %   bestStop___ = true);
      %   
      %ffNN = train_gradDesc...
      %   (ffNN_init___ = ffNN, ...
      %   dataArgs___ = {X_norm y 1.0}, ...
      %   targetOutputs_areClassIndcsColVecs___ = false, ...         
      %   trainNumEpochs___ = 300, ...
      %   trainBatchSize___ = false, ...   
      %   trainRandShuff___ = false, ...
      %   trainCostApproxChunk_numBatches___ = 1, ...
      %   validCostCalcInterval_numChunks___ = 1, ...
      %   learningRate___ = 3e-1, ...
      %   momentumRate___ = 0, ...
      %   nesterovAccGrad___ = false, ...
      %   weightRegulArgs___ = {{'L2'} [weightRegulParam]}, ...
      %   connectProbs___ = [1.0], ...
      %   bestStop___ = true);
      ffNN = train_conjGrad...
         (ffNN_init___ = ffNN, ...
         dataArgs___ = {X_norm y 1.0}, ...
         targetOutputs_areClassIndcsColVecs___ = false, ...
         numIters_perEpoch___ = 3000, ...
         trainNumEpochs___ = 1, ...
         trainBatchSize___ = false, ...   
         trainRandShuff___ = false, ...
         trainCostApproxChunk_numBatches___ = 1, ...
         validCostCalcInterval_numChunks___ = 1, ...
         weightRegulArgs___ = {{'L2'} [weightRegulParam]}, ...
         connectProbs___ = [1.0], ...
         bestStop___ = true);
      
      weights = ffNN.weights;
      
      [weights{1} weights_analytic_normalized]
      distRel(weights{1}, weights_analytic_normalized)
     
  % relativeDiff = distRel(weights_ffNN, coeffs_analyticNormalized)
   
  % testArea = 1000;
  % testNumBedrooms = 2;
  % fprintf('\nPredicted Price of House with Area = %i, No. of Bedrooms = %i:\n', ...
  %    testArea, testNumBedrooms);
  % fprintf('   from Analytic Solution: %g\n', ...
  %    [1 testArea testNumBedrooms] * coeffs_analytic);
  % fprintf('   from ffNN Solution: %g\n', ...
  %    predict(ffNN, [testArea testNumBedrooms]));
   
  % fprintf('\n');   
   
endfunction