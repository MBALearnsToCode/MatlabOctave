function ffNN_multiLinReg_housePrices...
   (learningRate = 0.3, numIters = 100)

   % load House Prices data
   data = load('housePrices.txt');
   x1 = houseAreas_sqft = data(:, 1);
   x2 = houseNumsBedrooms = data(:, 2);
   y = housePrices = data(:, 3);
   m = rows(data);
   
   % Print out some data points
   fprintf('\nFirst 10 examples from the House Prices dataset: \n');
   fprintf('   area = %.0f, numBeds = %.0f, price = %.0f\n', ...
      [x1(1 : 10, :) x2(1 : 10, :) y(1 : 10, :)]');   
   
   % Normalize scales of features for better convergence
   X = [x1 x2];
   coeffs_analytic = linRegWeights_analytic(y, X);
   
   % Linear regression coefficients - analytic solution
   fprintf('\nLinear Regression Coefficients (analytic solution on normalized features):\n');
   [X mu sigma] = normalizeMeanSd(X);
   coeffs_analyticNormalized = linRegWeights_analytic(y, X)
   
   %% Forward-Feeding Neural Net
   %% --------------------------   
   ffNN = class_ffNN...
      (inputDimSizes_perCase_vec = 2, ...
      addlLayersNumsNodes_vec = [], ...
      transformFuncs_list = {'linear'}, ...
      displayOverview = false, ...
      initWeights_rand = false);
   
   ffNN = train_gradDesc...
      (ffNN_init = ffNN, ...
      dataArgs_list = {X y 1.0}, ...
      targetOutputs_areClassIndcsColVecs = false, ...
      trainNumEpochs = numIters, ...
      trainBatchSize = false, ...   
      trainRandShuff = false, ...
      trainCostApproxChunk_numBatches = 1, ...
      validCostCalcInterval_numChunks = 1, ...
      learningRate_init = learningRate, ...
      momentumRate_init = 9e-1, ...
      nesterovAccGrad = true, ...
      weightRegulArgs_list = {{'L2'} [0]}, ...
      connectProbs = [1.0], ...
      bestStop = true);
      
   weights = ffNN.weights;
   fprintf('Linear Regression Coefficients (neural net solution on normalized features):\n');
   weights_ffNN = weights{1}
   
   relativeDiff = distRel(weights_ffNN, coeffs_analyticNormalized)
   
   testArea = 1000;
   testNumBedrooms = 2;
   fprintf('\nPredicted Price of House with Area = %i, No. of Bedrooms = %i:\n', ...
      testArea, testNumBedrooms);
   fprintf('   from Analytic Solution: %g\n', ...
      [1 testArea testNumBedrooms] * coeffs_analytic);
   fprintf('   from ffNN Solution: %g\n', ...
      predict(ffNN, normalizeMeanSd...
      ([testArea testNumBedrooms], mu, sigma)));
   
   fprintf('\n');   
   
endfunction