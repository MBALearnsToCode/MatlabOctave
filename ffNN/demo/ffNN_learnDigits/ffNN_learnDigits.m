function ffNN = ffNN_learnDigits(numsHid = [300 100], ...
   weightPenaltyTerm = 0, numEpochs = 30, ...
   numIters_perBatch = 10); 
   
   fresh;
   
   % load data
   [trainInput trainTargetOutput ...
   validInput validTargetOutput ...
   testInput testTargetOutput ...
   imgHeight imgWidth] = load_mNIST_11k;
   
   m = length(trainTargetOutput);
   
   
   % display random sample labels & images
   numDisplaySamples = 100;
   displaySamples_numRowsCols = sqrt(numDisplaySamples);
   randDisplaySamples = randperm(m, numDisplaySamples);
   
   [~, displayLabels] = max...
      (trainTargetOutput(randDisplaySamples, :), [], 2);
   fprintf('\n%i Sample Labels & Images:\n', numDisplaySamples);
   reshape(displayLabels, [displaySamples_numRowsCols ...
      displaySamples_numRowsCols])'
      
   plot2D_grayImages...
      (permute(trainInput(randDisplaySamples, :, :), [2 3 1]));
   
   
   % create Forward-Feeding Neural Network (FFNN)
   ffNN = class_ffNN...
      (inputDimSizes_perCase = 256, ...
      addlLayersNumsNodes = [numsHid 10], ...
      transformFuncs = {'logistic'}, ...
      displayOverview = false, ...
      initWeights = true);
      
   % reshape data to fit model's architecture
   trainInput = reshape(trainInput, [9000 256]);
   validInput = reshape(validInput, [1000 256]);
   testInput = reshape(testInput, [1000 256]);
   
   % train FFNN with CONJUGATE GRADIENT
   ffNN = train_conjGrad...
      (ffNN_init = ffNN, ...
      dataArgs = {trainInput trainTargetOutput ...
                  validInput validTargetOutput ...
                  testInput testTargetOutput}, ...
      targetOutput_isClassIndcsColVec = false, ...
      numIters_perBatch = numIters_perBatch, ...
      trainNumEpochs = numEpochs, ...
      trainBatchSize = false, ...
      trainRandShuff = false, ...
      trainCostApproxChunk_numBatches = 1, ...
      validCostCalcInterval_numChunks = 1, ...
      weightRegulArgs = {{'L2'} [weightPenaltyTerm]}, ...
      connectProbs = [1.0], ...
      bestStop = true);
      
endfunction