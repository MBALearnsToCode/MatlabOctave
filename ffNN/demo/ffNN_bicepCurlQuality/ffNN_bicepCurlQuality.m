function ffNN = ffNN_learnHumanActivities...
   (numsHid = [300 100], weightPenaltyTerm = 0, ...
   numEpochs = 300, numIters_perBatch = 9);
   
   close all;
   
   % load data
   fprintf('\nLoading Bicep Curl Quality Dataset...');
   [X y] = load_bicepCurlQuality;
   fprintf(' done!\n');   
   mu = mean(X);
   sigma = std(X);
   
   % create Forward-Feeding Neural Network (FFNN):
   % all layers are Logistic transformation layers
   % with the top layer automatically set as 
   % a 5-way Softmax layer
   ffNN = class_ffNN...
      (inputDimSizes_perCase = 52, ...
      addlLayersNumsNodes = [numsHid 5], ...
      transformFuncs = {}, ...
      displayOverview = false, ...
      initWeights_rand = true);
   ffNN.normalizeSubtract = mu;
   ffNN.normalizeDivide = sigma;
      
   % train FFNN with CONJUGATE GRADIENT
   ffNN = train_conjGrad...
      (ffNN_init = ffNN, ...
      dataArgs = {X y [0.6 0.2]}, ...
      targetOutput_isClassIndcsColVec_ofNumClasses = 5, ...
      numIters_perBatch = numIters_perBatch, ...
      trainNumEpochs = numEpochs, ...
      trainBatchSize = false, ...
      trainRandShuff = false, ...
      trainCostApproxChunk_numBatches = 1, ...
      validCostCalcInterval_numChunks = 1, ...
      weightRegulArgs = {{'L2'} [weightPenaltyTerm]}, ...
      connectProbs = [1.0], ...
      bestStop = true);  
   
endfunction