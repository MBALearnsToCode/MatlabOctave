function f = ...
   embedClassIndcs_inRealFeats_transformFuncHandles();

   funcType = 'Embed Class Indices in Real Features';
   
   addBias = false;
   
   func_signal = ...
      @(classIndcs_rowMat, realFeats_rowMat) ...
      embedClassIndcs_inRealFeats_rowMat...
      (classIndcs_rowMat, realFeats_rowMat).val;
  
   func_output_effDeriv = ...
      @(signal, returnDeriv = true) ...
      linearFunc_Mat(signal, returnDeriv);
    
   func_costOverSignalGrad_thruCostOverOutputGrad = ...
      @(costOverOutputGrad, outputOverSignalDeriv_effForm) ...
      costOverOutputGrad;
      
   func_costOverInputGrad_thruCostOverSignalGrad = ...
      @(costOverSignalGrad, ...
      classIndcs_rowMat, realFeats_rowMat) ...
      []; % discreet input, not differientiable

   func_costOverWeightGrad_thruCostOverSignalGrad = ...
      @(costOverSignalGrad, ...
      classIndcs_rowMat, realFeats_rowMat) ...
      embedClassIndcs_inRealFeats_rowMat...
      (classIndcs_rowMat, ...
realFeats_rowMat).costOverRealFeatsGrad_thruCostOverOutputGrad...
      (costOverSignalGrad);
    
   f = class_transformFuncHandles(funcType, addBias, ...
      func_signal, func_output_effDeriv, ...
      func_costOverSignalGrad_thruCostOverOutputGrad, ...
      func_costOverInputGrad_thruCostOverSignalGrad, ...
      func_costOverWeightGrad_thruCostOverSignalGrad);
      
endfunction